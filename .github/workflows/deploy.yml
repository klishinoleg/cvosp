name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.changes.outputs.api }}
      vite_changed: ${{ steps.changes.outputs.vite }}
      full_rebuild: ${{ steps.changes.outputs.full }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed
        uses: tj-actions/changed-files@v39

      - name: Set flags
        id: set-vars
        run: |
          echo "All changed files:"
          echo "${{ steps.changed.outputs.all_changed_files }}"
          
          API_CHANGED=false
          VITE_CHANGED=false
          FULL_REBUILD=false
          
          for file in ${{ steps.changed.outputs.all_changed_files }}; do
            if [[ $file == fastapi/* ]]; then
              API_CHANGED=true
            fi
            if [[ $file == vite/* ]]; then
              VITE_CHANGED=true
            fi
            if [[ $file == docker-compose.yml || $file == dapi.Dockerfile || $file == dvite.Dockerfile || $file == dpg.Dockerfile || $file == Dockerfile ]]; then
              FULL_REBUILD=true
            fi
          done
          
          echo "api_changed=${API_CHANGED}" >> $GITHUB_OUTPUT
          echo "vite_changed=${VITE_CHANGED}" >> $GITHUB_OUTPUT
          echo "full_rebuild=${FULL_REBUILD}" >> $GITHUB_OUTPUT

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: production
    if: needs.detect-changes.outputs.api_changed == 'true' || needs.detect-changes.outputs.vite_changed == 'true' || needs.detect-changes.outputs.full_rebuild == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Check docker & git version
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker -v && docker-compose -v && git --version"

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
            SERVER_HOST='${{ vars.SERVER_HOST }}' \
            VITE_HOST='${{ vars.VITE_HOST }}' \
            LANGUAGES='${{ vars.LANGUAGES }}' \
            LANGUAGE='${{ vars.LANGUAGE }}' \
            HTTP_SCHEME='${{ vars.HTTP_SCHEME }}' \
            USE_S3='${{ vars.USE_S3 }}' \
            POSTGRES_PASSWORD='${{ vars.POSTGRES_PASSWORD }}' \
            ADMIN_PASSWORD='${{ vars.ADMIN_PASSWORD }}' \
            ADMIN_SECRET_KEY='${{ vars.ADMIN_SECRET_KEY }}' \
            DB_PASSWORD='${{ vars.DB_PASSWORD }}' \
            SECRET_KEY='${{ vars.SECRET_KEY }}' \
            SERVER_HOST='${{ vars.SERVER_HOST }}' \
            VITE_HOST='${{ vars.VITE_HOST }}' \
            bash -s" << 'EOF'
            # 1️⃣ Check git exist
            if ! command -v git &> /dev/null; then
              echo "Git has not installed. Install git..."
              sudo yum update -y
              sudo yum install -y git
            fi
          
            # 3️⃣ Check the project dir
            if [ ! -d "/var/www/cvosp" ]; then
              echo "Projects dir is not intalled. Install GitHub..."
              cd /var/www
              git clone https://github.com/klishinoleg/cvosp.git
              cd /var/www/cvosp
              envsubst '${ADMIN_PASSWORD} ${SERVER_HOST} ${VITE_HOST} ${HTTP_SCHEME} ${POSTGRES_PASSWORD} ${LANGUAGES} ${LANGUAGE} ${ADMIN_PASSWORD} ${VITE_HOST} ${SERVER_HOST} ${SECRET_KEY} ${DB_PASSWORD} ${ADMIN_SECRET_KEY}' < .env.default > .env
              echo "Created .env with deploy variables:"
              cat .env
              chmod +x /var/www/cvosp/docker/entrypoint_db.sh
              chmod +x /var/www/cvosp/fastapi/entrypoint.sh
              chmod +x /var/www/cvosp/nginx/entrypoint.sh
              chmod +x /var/www/cvosp/vite/entrypoint.sh
            else
              echo "Update project..."
              cd /var/www/cvosp
              git pull origin main
            fi
          
            {% raw %}# FULL REBUILD{% endraw %}
            if [[ "${{ needs.detect-changes.outputs.full_rebuild }}" == "true" ]]; then
              docker compose pull
              docker compose up -d --build
              exit 0
            fi
          
            {% raw %}# BUILD API{% endraw %}
            if [[ "${{ needs.detect-changes.outputs.api_changed }}" == "true" ]]; then
              docker compose build api
              docker compose up -d api
            fi
          
            {% raw %}# BUILD VITE{% endraw %}
            if [[ "${{ needs.detect-changes.outputs.vite_changed }}" == "true" ]]; then
              docker compose build vite
              docker compose up -d vite
            fi
          EOF
