name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Check docker & git version
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker -v && docker-compose -v && git --version"

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
            SERVER_HOST='${{ vars.SERVER_HOST }}' \
            VITE_HOST='${{ vars.VITE_HOST }}' \
            LANGUAGES='${{ vars.LANGUAGES }}' \
            LANGUAGE='${{ vars.LANGUAGE }}' \
            HTTP_SCHEME='${{ vars.HTTP_SCHEME }}' \
            USE_S3='${{ vars.USE_S3 }}' \
            POSTGRES_PASSWORD='${{ vars.POSTGRES_PASSWORD }}' \
            ADMIN_PASSWORD='${{ vars.ADMIN_PASSWORD }}' \
            ADMIN_SECRET_KEY='${{ vars.ADMIN_SECRET_KEY }}' \
            DB_PASSWORD='${{ vars.DB_PASSWORD }}' \
            SECRET_KEY='${{ vars.SECRET_KEY }}' \
            SERVER_HOST='${{ vars.SERVER_HOST }}' \
            VITE_HOST='${{ vars.VITE_HOST }}' \
            bash -s" << 'EOF'
            # 1Ô∏è‚É£ Check git exist
            if ! command -v git &> /dev/null; then
              echo "Git has not installed. Install git..."
              sudo yum update -y
              sudo yum install -y git
            fi
          
            # 3Ô∏è‚É£ Check the project dir
            if [ ! -d "/var/www/cvosp" ]; then
              echo "Projects dir is not intalled. Install GitHub..."
              cd /var/www
              git clone https://github.com/klishinoleg/cvosp.git
              cd /var/www/cvosp
              envsubst '${ADMIN_PASSWORD} ${SERVER_HOST} ${VITE_HOST} ${HTTP_SCHEME} ${POSTGRES_PASSWORD} ${LANGUAGES} ${LANGUAGE} ${ADMIN_PASSWORD} ${VITE_HOST} ${SERVER_HOST} ${SECRET_KEY} ${DB_PASSWORD} ${ADMIN_SECRET_KEY}' < .env.default > .env
              echo "Created .env with deploy variables:"
              cat .env
            else
              echo "Update project..."
              cd /var/www/cvosp
              git pull origin main
            fi
          
            chmod +x /home/ec2-user/cvosp/docker/entrypoint_db.sh
            chmod +x /home/ec2-user/cvosp/fastapi/entrypoint.sh
            chmod +x /home/ec2-user/cvosp/nginx/entrypoint.sh
            chmod +x /home/ec2-user/cvosp/vite/entrypoint.sh
          
            DOCKER_IMAGES="klishinoleg/cvosp/api klishinoleg/cvosp/db klishinoleg/cvosp/vite"
          
            # 4Ô∏è‚É£ Run (reload) docker
            echo "Rebuild docker containers with rollback..."
            echo "Tagging current images as backup..."
            for image in DOCKER_IMAGES; do
              docker tag "$image:latest" "$image:backup"
            done
          
            echo "Stopping old containers"
            docker-compose down
          
            echo "Trying to build and start new containers..."
            if docker-compose up --build -d; then
              echo "‚úÖ Compose succeeded"
            else
              echo "‚ùå Build failed, rolling back..."
              docker-compose down
              for image in DOCKER_IMAGES; do
                docker tag "$image:backup" "$image:latest"
              done
              docker-compose up -d
              echo "‚úÖ Rollback completed"
            fi
            echo "üßπ Removing backup images..."
            for image in $IMAGES; do
              docker rmi "$image:backup" || true
            done
          EOF
